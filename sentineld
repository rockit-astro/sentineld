#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

import threading
import urllib.request
import Pyro4
import xml.etree.ElementTree as ET
from astropy.time import Time
import astropy.units as u
from rockit.common import daemons, log

SENTINEL_URI = 'http://10.2.5.16:5000/status'
QUERY_TIMEOUT = 3

AUTO_SENSORS = {
    'wind_dir': './weather/wind_dir',
    'wind_speed': './weather/wind_speed_avg',
    'temperature': './weather/temperature',
    'relative_humidity': './weather/humidity',
    'pressure': './weather/pressure',
    'dew_point_delta': './weather/dew_point_margin',
    'dust_large': './weather/dust_large',
    'dust_small': './weather/dust_small',
    'light': './weather/light',
    'sky_temperature': './weather/sky_temperature'
}

MANUAL_SENSORS = ['rg11_unsafe', 'rg11_total']

# Only some of the RG11s are connected
VALID_RG11S = [1, 2, 4]

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods


class SentinelDaemon:
    """Wraps a web request to NGTS Sentinel"""
    def __init__(self):
        self._query_error = False

        self._lock = threading.Lock()
        self._data = {}
        self._updated = {}
        for k in list(AUTO_SENSORS.keys()) + MANUAL_SENSORS:
            self._data[k] = 0
            self._updated[k] = Time.now() - 1 * u.minute

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            try:
                with urllib.request.urlopen(SENTINEL_URI, timeout=QUERY_TIMEOUT) as response:
                    sentinel_string = response.read()
                    tree = ET.fromstring(sentinel_string)

                date = Time.strptime(tree.find('./weather/tsample').text, '%Y-%m-%d %H:%M:%S')

                for key, path in AUTO_SENSORS.items():
                    value = tree.find(path).text
                    if value and value != 'NULL':
                        self._data[key] = float(value)
                        self._updated[key] = date

                # Combine rg11 sensors
                rg11_unsafe = 0
                for r in VALID_RG11S:
                    rg11_value = tree.find(f'./weather/rg11_{r:02d}').text
                    if rg11_value and rg11_value != 'NULL':
                        rg11_unsafe += int(rg11_value)

                self._data['rg11_unsafe'] = rg11_unsafe
                self._data['rg11_total'] = len(VALID_RG11S)
                self._updated['rg11_unsafe'] = self._updated['rg11_total'] = date

                # Determine roof status
                roof_state = tree.find('./roof/state').text
                if roof_state and roof_state != 'NULL':
                    self._data['roof_state'] = roof_state
                    self._data['roof_closed'] = self._data['roof_state'] == "FULL CLOSED"
                    self._updated['roof_state'] = self._updated['roof_closed'] = date

                if self._query_error:
                    log.info('sentineld', 'Restored contact with Sentinel')
                    self._query_error = False

                ret = {"date": date.strftime('%Y-%m-%dT%H:%M:%SZ')}
                ret.update(self._data)
                ret.update({k + '_valid': v > Time.now() - 1 * u.min for k, v in self._updated.items()})
                return ret
            except Exception as exception:
                print(f'ERROR: failed to query from Sentinel: {exception}')

                if not self._query_error:
                    log.error('sentineld', 'Lost contact with Sentinel')
                    self._query_error = True

                return None


if __name__ == '__main__':
    daemons.ngts_sentinel.launch(SentinelDaemon())
